name: Android CI v2.4

on:
  workflow_dispatch:
    inputs:
      title:
        description: 'Release title (optional)'
        required: false
        default: 'Android CI v2.4 Build'
      key_changes:
        description: 'Key changes (optional)'
        required: false
        default: ''

permissions:
  contents: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK and Gradle Cache
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Build Application Package (APK)
        id: build_apk
        run: |
          ./gradlew assembleRelease --no-daemon
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::APK not found at expected path: $APK_PATH"
            exit 1
          fi
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      - name: Verify and Rename APK
        id: verify_apk
        run: |
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::PRIMARY FAILURE: The Release APK was not found. Halting workflow."
            exit 1
          fi
          mv "$APK_PATH" "synapse-debug.apk"
          echo "APK size: $(du -h synapse-debug.apk | cut -f1)"
          echo "path=synapse-debug.apk" >> $GITHUB_OUTPUT

      - name: Prepare Release Information
        id: prepare_info
        run: |
          BUILD_ID=$(date +'%Y-%m-%d-%H%M%S')
          SHORT_SHA=$(git rev-parse --short HEAD)
          RELEASE_TAG="build-${BUILD_ID}-${SHORT_SHA}"
          
          # Determine release title
          if [ -z "${{ inputs.title }}" ]; then
            RELEASE_NAME="${{ github.workflow }} Build ${RELEASE_TAG}"
          else
            RELEASE_NAME="${{ inputs.title }} ${RELEASE_TAG}"
          fi
          
          # Prepare changelog
          if [ -n "${{ inputs.key_changes }}" ]; then
            echo -e "# Release Notes\n\n${{ inputs.key_changes }}" > CHANGELOG.md
          else
            {
              echo "# Build Notes for ${RELEASE_TAG}"
              echo ""
              git log -10 --pretty=format:"- **%s** (%h)" --no-mergers || echo "- Default changelog"
            } > CHANGELOG.md
          fi
          
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "Generated changelog with $(wc -l < CHANGELOG.md) lines"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.prepare_info.outputs.RELEASE_TAG }}
          name: ${{ steps.prepare_info.outputs.RELEASE_NAME }}
          body_file: CHANGELOG.md
          files: synapse-debug.apk
          prerelease: true

      - name: Show Release Info
        if: always()
        run: |
          echo "Release status: ${{ job.status }}"
          echo "Release URL: ${{ steps.create_release.outputs.html_url || 'Not created' }}"
          echo "Release Tag: ${{ steps.prepare_info.outputs.RELEASE_TAG || 'Unknown' }}"

  cleanup:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ always() }}
    steps:
      - name: Cleanup Artifacts
        run: |
          echo "Cleaning up workspace..."
          rm -f synapse-debug.apk CHANGELOG.md || true
          echo "Cleanup complete"

      - name: Workflow Run Cleanup
        if: success()
        uses: rokroskar/workflow-run-cleanup-action@v2.0.0
        with:
          preserve_days: 7
          keep_minimum_runs: 1
          only_workflow: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}