name: Release Publisher

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers only on tags like v1.2.3

# <-- POINT 3: Permissions required for the cleanup job to delete old workflow runs.
permissions:
  contents: write   # Needed for softprops/action-gh-release to create releases
  actions: write    # Needed for the cleanup job to delete workflow runs

env:
  APP_NAME: "Sketchware Pro"

jobs:
  release:
    runs-on: ubuntu-latest
    # This job will only run for tag pushes, preventing errors on other commits.
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for full changelog generation

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Prepare Release Assets
        id: prepare
        run: |
          # <-- POINT 1 & 2: Using the most robust method for versioning.
          # github.ref_name is provided by GitHub directly, removing any chance of parsing errors.
          VERSION_TAG="${GITHUB_REF_NAME}" # e.g., "v1.2.3"
          APK_PATH="app/build/outputs/apk/release/app-release.apk"

          # <-- POINT 2 & 4: Better error handling. Fail fast if the APK wasn't built.
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::Build failed: Release APK not found at $APK_PATH"
            exit 1
          fi

          # Find previous tag for a clean changelog, works even for the first release.
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags HEAD~ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Generate build info
          BUILD_TIMESTAMP=$(date +'%s')
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          APK_SHA256=$(sha256sum "$APK_PATH" | cut -d' ' -f1)
          
          # Create a reliable filename
          RELEASE_FILENAME="${APP_NAME}-${VERSION_TAG}-${BUILD_TIMESTAMP}.apk"
          mv "$APK_PATH" "$RELEASE_FILENAME"
          
          # Generate professional changelog
          {
            echo "# Release Notes ${VERSION_TAG}"
            echo ""
            echo "## What's Changed"
            git log --pretty=format:"- **%s** ([%h](https://github.com/$GITHUB_REPOSITORY/commit/%H))" --no-merges ${PREVIOUS_TAG}..HEAD
          } > CHANGELOG.md
          
          # Create summary for Telegram using a multiline-safe method
          {
            echo "SUMMARY<<EOF"
            git log --pretty=format:"- %s" --no-merges ${PREVIOUS_TAG}..HEAD | head -n 5
            echo "EOF"
          } >> $GITHUB_ENV

          # Set outputs for other steps
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          echo "APK_SIZE=${APK_SIZE}" >> $GITHUB_ENV
          echo "RELEASE_FILENAME=${RELEASE_FILENAME}" >> $GITHUB_ENV
          echo "SHA256=${APK_SHA256}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: "${{ env.APP_NAME }} ${{ env.VERSION_TAG }}"
          body_path: CHANGELOG.md
          files: ${{ env.RELEASE_FILENAME }}

      # <-- POINT 4: Handle "best effort" delivery. This step can fail without failing the whole workflow.
      - name: Send Telegram Announcement
        if: success() # Only run if the release was created successfully
        continue-on-error: true # The workflow will succeed even if the Telegram message fails
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message_thread_id: ${{ secrets.TELEGRAM_TOPIC_ID }}
          parse_mode: HTML
          message: |
            <b>üéâ ${{ env.APP_NAME }} ${{ env.VERSION_TAG }} Released!</b>
            
            <b>üì¶ Package Size:</b> <code>${{ env.APK_SIZE }}</code>
            <b>üîí Integrity Check:</b> <code>${{ env.SHA256 }}</code>
            
            <b>üöÄ Key Changes:</b>
            <pre>${{ env.SUMMARY }}</pre>
            
            <i>Full changelog and downloads available on GitHub.</i>
          reply_markup: |
            {
              "inline_keyboard": [
                [
                  {
                    "text": "‚¨áÔ∏è Download & Notes",
                    "url": "${{ steps.create_release.outputs.html_url }}"
                  }
                ]
              ]
            }

  # <-- POINT 3: New job to clean up previous failed runs.
  cleanup-runs:
    runs-on: ubuntu-latest
    # This job runs *after* the release job, and *only if* the release job was successful.
    needs: release
    if: success()

    steps:
      - name: Delete previous failed workflow runs
        uses: matt-flo/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 7 # Keep all runs for 7 days
          keep_minimum_runs: 1 # Always keep the most recent run, regardless of status
          # This specifies we are deleting runs of THIS workflow ("Release Publisher")
          delete_workflow_pattern: ${{ github.workflow }}
          # Only delete runs that have failed or were cancelled
          delete_run_by_conclusion_pattern: failure,cancelled