name: Release Publisher

on:
  # 1. Automatic trigger on tag push
  push:
    tags:
      - 'v*.*.*'
  # 2. Manual trigger from the Actions tab
  workflow_dispatch:
    inputs:
      tag_to_release:
        description: 'The tag to build and release (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  actions: write

env:
  APP_NAME: "Sketchware Pro"

jobs:
  release:
    runs-on: ubuntu-latest
    # The job now runs if it's a tag push OR a manual dispatch.
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      # Initial checkout is on the branch you run it from (e.g., main)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # This new step is CRUCIAL for manual runs.
      # It ensures we are building the code from the tag you specified, not from the default branch.
      - name: Checkout Correct Tag for Manual Run
        if: github.event_name == 'workflow_dispatch'
        run: git checkout ${{ github.event.inputs.tag_to_release }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Prepare Release Assets
        id: prepare
        run: |
          # Determine the version tag based on how the workflow was triggered
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION_TAG="${{ github.event.inputs.tag_to_release }}"
          else
            VERSION_TAG="${{ github.ref_name }}"
          fi

          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::Build failed: Release APK not found at $APK_PATH"
            exit 1
          fi

          # The changelog now correctly finds the previous tag relative to the current one
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags ${VERSION_TAG}^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          BUILD_TIMESTAMP=$(date +'%s')
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          APK_SHA256=$(sum "$APK_PATH" | cut -d' ' -f1)
          
          RELEASE_FILENAME="${APP_NAME}-${VERSION_TAG}-${BUILD_TIMESTAMP}.apk"
          mv "$APK_PATH" "$RELEASE_FILENAME"
          
          {
            echo "# Release Notes ${VERSION_TAG}"
            echo ""
            echo "## What's Changed"
            git log --pretty=format:"- **%s** ([%h](https://github.com/$GITHUB_REPOSITORY/commit/%H))" --no-merges ${PREVIOUS_TAG}..${VERSION_TAG}
          } > CHANGELOG.md
          
          {
            echo "SUMMARY<<EOF"
            git log --pretty=format:"- %s" --no-merges ${PREVIOUS_TAG}..${VERSION_TAG} | head -n 5
            echo "EOF"
          } >> $GITHUB_ENV

          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          echo "APK_SIZE=${APK_SIZE}" >> $GITHUB_ENV
          echo "RELEASE_FILENAME=${RELEASE_FILENAME}" >> $GITHUB_ENV
          echo "SHA256=${APK_SHA256}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        # Use the correct tag depending on the trigger
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_to_release) || github.ref }}
          name: "${{ env.APP_NAME }} ${{ env.VERSION_TAG }}"
          body_path: CHANGELOG.md
          files: ${{ env.RELEASE_FILENAME }}

      - name: Send Telegram Announcement
        if: success()
        continue-on-error: true
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message_thread_id: ${{ secrets.TELEGRAM_TOPIC_ID }}
          parse_mode: HTML
          message: |
            <b>üéâ ${{ env.APP_NAME }} ${{ env.VERSION_TAG }} Released!</b>
            <b>üì¶ Package Size:</b> <code>${{ env.APK_SIZE }}</code>
            <b>üîí Integrity Check:</b> <code>${{ env.SHA256 }}</code>
            <b>üöÄ Key Changes:</b>
            <pre>${{ env.SUMMARY }}</pre>
            <i>Full changelog and downloads available on GitHub.</i>
          reply_markup: |
            { "inline_keyboard": [[{ "text": "‚¨áÔ∏è Download & Notes", "url": "${{ steps.create_release.outputs.html_url }}" }]] }

  cleanup-runs:
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Delete previous failed workflow runs
        uses: matt-flo/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 1
          delete_workflow_pattern: ${{ github.workflow }}
          delete_run_by_conclusion_pattern: failure,cancelled