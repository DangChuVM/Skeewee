name: Android CI v2

on:
  # The ONLY trigger is a manual button press from the Actions tab.
  workflow_dispatch:

permissions:
  contents: write   # To create releases and tags
  actions: write    # To clean up old workflow runs

env:
  APP_NAME: "Sketchware Pro"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the latest code
        uses: actions/checkout@v4
        with:
          # Fetches all history to generate a changelog
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Prepare Release Assets
        id: prepare
        run: |
          # 1. Create a unique build ID based on date and commit SHA
          BUILD_ID=$(date +'%Y-%m-%d-%H%M')
          SHORT_SHA=$(git rev-parse --short HEAD)
          RELEASE_TAG="build-${BUILD_ID}-${SHORT_SHA}"

          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::Build failed: Release APK not found."
            exit 1
          fi

          # 2. Create a simple changelog of the last 10 commits
          echo "# Build Notes for ${RELEASE_TAG}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Recent Changes" >> CHANGELOG.md
          git log -10 --pretty=format:"- **%s** (%h)" >> CHANGELOG.md

          # 3. Create a summary for Telegram
          {
            echo "SUMMARY<<EOF"
            git log -5 --pretty=format:"- %s"
            echo "EOF"
          } >> $GITHUB_ENV

          # 4. Set outputs for other steps
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          mv "$APK_PATH" "release.apk"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # This action will CREATE the git tag for you automatically. No more headaches.
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Build ${{ env.RELEASE_TAG }}"
          body_path: CHANGELOG.md
          files: release.apk
          # Marks it as a development/testing build on GitHub, which is perfect for this model.
          prerelease: true

      - name: Send Telegram Announcement
        if: success()
        continue-on-error: true
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message_thread_id: ${{ secrets.TELEGRAM_TOPIC_ID }}
          parse_mode: HTML
          message: |
            <b>‚úÖ New Build Available: ${{ env.RELEASE_TAG }}</b>
            
            <b>üöÄ Recent Changes:</b>
            <pre>${{ env.SUMMARY }}</pre>
            
            <i>Download the APK from the full release notes on GitHub.</i>
          reply_markup: |
            {
              "inline_keyboard": [
                [
                  {
                    "text": "‚¨áÔ∏è Download & Notes",
                    "url": "${{ steps.create_release.outputs.html_url }}"
                  }
                ]
              ]
            }

  cleanup-runs:
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Delete previous failed workflow runs
        uses: matt-flo/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 1
          delete_workflow_pattern: ${{ github.workflow }}
          delete_run_by_conclusion_pattern: failure,cancelled