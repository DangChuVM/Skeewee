# ==============================================================================
#  Android CI v2.4 - Truly Resilient Build Publisher
# ==============================================================================
#  This workflow builds, verifies, and publishes a new release. It is designed
#  to be extremely robust, eliminating unnecessary external dependencies and
#  prioritizing the delivery of the build artifact above all else.
# ==============================================================================
name: Android CI v2.4

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

env:
  APP_NAME: "Sketchware Pro"

# ==============================================================================
#  JOBS
# ==============================================================================
jobs:
  # ----------------------------------------------------------------------------
  #  JOB 1: Build and Release the Application
  # ----------------------------------------------------------------------------
  release:
    runs-on: ubuntu-latest

    steps:
      # --- 1. Setup Environment ---
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK and Gradle Cache
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      # --- 2. Build and Verify ---
      - name: Build Application Package (APK)
        run: ./gradlew assembleRelease --no-daemon

      - name: Verify and Stage APK
        id: verify_apk
        run: |
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::PRIMARY FAILURE: The Release APK was not found. Halting workflow."
            exit 1
          fi
          echo "APK found. Renaming for release."
          mv "$APK_PATH" "release.apk"
          echo "path=release.apk" >> $GITHUB_OUTPUT

      # --- 3. Prepare Release Metadata (Best Effort) ---
      - name: Prepare Release Information
        id: prepare_info
        continue-on-error: true # This step is non-critical.
        run: |
          BUILD_ID=$(date +'%Y-%m-%d-%H%M%S')
          SHORT_SHA=$(git rev-parse --short HEAD)
          RELEASE_TAG="build-${BUILD_ID}-${SHORT_SHA}"
          
          CHANGELOG_BODY=$(git log -10 --pretty=format:"- **%s** (%h)") || CHANGELOG_BODY="Could not generate changelog. APK is attached."
          
          echo "# Build Notes for ${RELEASE_TAG}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "${CHANGELOG_BODY}" >> CHANGELOG.md
          
          git log -5 --pretty=format:"- %s" > TELEGRAM_SUMMARY.txt || echo "Build completed successfully." > TELEGRAM_SUMMARY.txt

          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=Build ${RELEASE_TAG}" >> $GITHUB_OUTPUT

      # --- 4. Read Summary File for Telegram (Best Effort) ---
      # THE FIX: Replaced the failing external action with a dependency-free shell command.
      # This is the standard, most reliable way to read a file's content into an output.
      - name: Read Changelog Summary into Output
        id: read_summary
        if: steps.prepare_info.outcome == 'success'
        run: |
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat TELEGRAM_SUMMARY.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # --- 5. Publish Release ---
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.prepare_info.outputs.RELEASE_TAG || format('build-{0}', github.run_id) }}
          name: ${{ steps.prepare_info.outputs.RELEASE_NAME || format('Build {0}', github.run_id) }}
          body_path: ${{ steps.prepare_info.outcome == 'success' && 'CHANGELOG.md' || '' }}
          body: ${{ steps.prepare_info.outcome == 'success' && '' || 'Build artifact attached.' }}
          files: ${{ steps.verify_apk.outputs.path }}
          prerelease: true

      # --- 6. Announce on Telegram (Best Effort) ---
      - name: Send Telegram Notification
        if: success() && steps.create_release.outputs.html_url != ''
        continue-on-error: true
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message_thread_id: ${{ secrets.TELEGRAM_TOPIC_ID }}
          parse_mode: HTML
          message: |
            <b>‚úÖ New Build Available: ${{ steps.prepare_info.outputs.RELEASE_TAG || format('build-{0}', github.run_id) }}</b>
            
            <b>üöÄ Recent Changes:</b>
            <pre>${{ steps.read_summary.outputs.content || 'Build completed successfully.' }}</pre>
            
            <i>Download the APK from the full release notes on GitHub.</i>
          reply_markup: |
            { "inline_keyboard": [[{ "text": "‚¨áÔ∏è Download & Notes", "url": "${{ steps.create_release.outputs.html_url }}" }]] }

  # ----------------------------------------------------------------------------
  #  JOB 2: Cleanup Old Workflow Runs (Best Effort)
  # ----------------------------------------------------------------------------
  cleanup-runs:
    runs-on: ubuntu-latest
    needs: release
    if: success()
    continue-on-error: true # This entire job is non-critical.
    steps:
      - name: Delete Old Failed Workflows
        uses: matic-for/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 1
          delete_workflow_pattern: ${{ github.workflow }}
          delete_run_by_conclusion_pattern: failure,cancelled